#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${BLUE}üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CUDA + FlashInfer${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""

# ============================================================================
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ CUDA –∏–∑ –¥—Ä–∞–π–≤–µ—Ä–∞
# ============================================================================

echo -e "${CYAN}üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ CUDA –¥—Ä–∞–π–≤–µ—Ä–∞...${NC}"

if ! command -v nvidia-smi &>/dev/null; then
    echo -e "${RED}‚ùå nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    exit 1
fi

DRIVER_CUDA_FULL=$(nvidia-smi | grep -oP 'CUDA Version: \K[0-9.]+' | head -1)
DRIVER_CUDA_MAJOR=$(echo "$DRIVER_CUDA_FULL" | cut -d'.' -f1)
DRIVER_CUDA_MINOR=$(echo "$DRIVER_CUDA_FULL" | cut -d'.' -f2)

echo -e "   –î—Ä–∞–π–≤–µ—Ä CUDA: ${GREEN}${DRIVER_CUDA_FULL}${NC}"
echo ""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é Toolkit
if [ "$DRIVER_CUDA_MAJOR" -eq 13 ]; then
    TOOLKIT_VERSION="13.0"
    TOOLKIT_PACKAGE="cuda-toolkit-13-0"
    CUDA_PATH="/usr/local/cuda-13.0"
    PYTORCH_CUDA="cu130"  # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    PYTORCH_URL="https://download.pytorch.org/whl/nightly/cu130"
    FLASHINFER_CUDA="cu130"
elif [ "$DRIVER_CUDA_MAJOR" -eq 12 ]; then
    if [ "$DRIVER_CUDA_MINOR" -ge 8 ]; then
        TOOLKIT_VERSION="12.8"
        TOOLKIT_PACKAGE="cuda-toolkit-12-8"
        CUDA_PATH="/usr/local/cuda-12.8"
        PYTORCH_CUDA="cu128"
        PYTORCH_URL="https://download.pytorch.org/whl/cu128"
        FLASHINFER_CUDA="cu124"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 12.4 (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
    else
        TOOLKIT_VERSION="12.1"
        TOOLKIT_PACKAGE="cuda-toolkit-12-1"
        CUDA_PATH="/usr/local/cuda-12.1"
        PYTORCH_CUDA="cu121"
        PYTORCH_URL="https://download.pytorch.org/whl/cu121"
        FLASHINFER_CUDA="cu121"
    fi
else
    echo -e "${RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è CUDA: ${DRIVER_CUDA_FULL}${NC}"
    exit 1
fi

echo -e "${CYAN}üìã –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC}"
echo -e "   CUDA Toolkit: ${GREEN}${TOOLKIT_VERSION}${NC}"
echo -e "   PyTorch: ${GREEN}${PYTORCH_CUDA}${NC}"
echo -e "   FlashInfer: ${GREEN}${FLASHINFER_CUDA}${NC}"
echo ""

read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 0
fi

echo ""

# ============================================================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Toolkit
# ============================================================================

check_toolkit() {
    if ! command -v nvcc &>/dev/null; then
        return 1
    fi
    
    NVCC_VERSION=$(nvcc --version | grep -oP 'release \K[0-9.]+')
    if [ "$NVCC_VERSION" = "$TOOLKIT_VERSION" ]; then
        echo -e "${GREEN}‚úÖ CUDA Toolkit ${TOOLKIT_VERSION} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Toolkit ${NVCC_VERSION}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${TOOLKIT_VERSION}${NC}"
        return 1
    fi
}

# ============================================================================
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CUDA Toolkit
# ============================================================================

install_toolkit() {
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CUDA Toolkit ${TOOLKIT_VERSION}...${NC}"
    echo ""
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if [ ! -f cuda-keyring_1.1-1_all.deb ]; then
        wget -q https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-keyring_1.1-1_all.deb
    fi
    
    sudo dpkg -i cuda-keyring_1.1-1_all.deb
    sudo apt-get update -qq
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${TOOLKIT_PACKAGE} (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-10 –º–∏–Ω—É—Ç)..."
    sudo apt-get install -y -qq ${TOOLKIT_PACKAGE} ninja-build build-essential
    
    echo -e "${GREEN}‚úÖ CUDA Toolkit ${TOOLKIT_VERSION} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    echo ""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    export CUDA_HOME=${CUDA_PATH}
    export PATH=$CUDA_HOME/bin:$PATH
    export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    if nvcc --version &>/dev/null; then
        NVCC_VERSION=$(nvcc --version | grep -oP 'release \K[0-9.]+')
        echo -e "${GREEN}‚úÖ nvcc ${NVCC_VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    fi
    
    echo ""
}

# ============================================================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================================================================

setup_env() {
    echo -e "${CYAN}üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    
    if grep -q "CUDA_HOME=${CUDA_PATH}" ~/.bashrc 2>/dev/null; then
        echo -e "   ${GREEN}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã${NC}"
    else
        cat >> ~/.bashrc << EOF

# CUDA ${TOOLKIT_VERSION} –¥–ª—è FlashInfer
export CUDA_HOME=${CUDA_PATH}
export PATH=\$CUDA_HOME/bin:\$PATH
export LD_LIBRARY_PATH=\$CUDA_HOME/lib64:\$LD_LIBRARY_PATH
EOF
        echo -e "   ${GREEN}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ ~/.bashrc${NC}"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    export CUDA_HOME=${CUDA_PATH}
    export PATH=$CUDA_HOME/bin:$PATH
    export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
    
    echo ""
}

# ============================================================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤
# ============================================================================

setup_python() {
    echo -e "${CYAN}üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    echo ""
    
    if [ ! -d ".venv" ]; then
        echo -e "${RED}‚ùå .venv –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        exit 1
    fi
    
    source .venv/bin/activate
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PyTorch
    NEEDS_PYTORCH=false
    if ! python -c "import torch" 2>/dev/null; then
        echo "PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        NEEDS_PYTORCH=true
    else
        TORCH_CUDA=$(python -c "import torch; print(torch.version.cuda)" 2>/dev/null)
        if [ "$TORCH_CUDA" != "${DRIVER_CUDA_MAJOR}.${DRIVER_CUDA_MINOR}" ]; then
            echo "PyTorch CUDA ${TORCH_CUDA} != Driver CUDA ${DRIVER_CUDA_FULL}"
            NEEDS_PYTORCH=true
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ "$NEEDS_PYTORCH" = true ]; then
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch –¥–ª—è CUDA ${PYTORCH_CUDA}..."
        
        # –î–ª—è CUDA 13.0 –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å stable —Ä–µ–ª–∏–∑–∞
        if [ "$DRIVER_CUDA_MAJOR" -eq 13 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  CUDA 13.0 –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å nightly PyTorch${NC}"
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: Nightly
            if uv pip install --pre torch torchvision torchaudio --index-url ${PYTORCH_URL} 2>/dev/null; then
                echo -e "${GREEN}‚úÖ PyTorch nightly —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            else
                # Fallback –Ω–∞ CUDA 12.8
                echo -e "${YELLOW}‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º PyTorch –¥–ª—è CUDA 12.8 (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)${NC}"
                uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128
            fi
        else
            uv pip install torch torchvision torchaudio --index-url ${PYTORCH_URL}
        fi
        
        echo -e "${GREEN}‚úÖ PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${GREEN}‚úÖ PyTorch —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
    fi
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ vLLM
    if ! python -c "import vllm" 2>/dev/null; then
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ vLLM..."
        uv pip install vllm
        echo -e "${GREEN}‚úÖ vLLM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        VLLM_VERSION=$(python -c "import vllm; print(vllm.__version__)")
        echo -e "${GREEN}‚úÖ vLLM ${VLLM_VERSION} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    echo ""
    
    # FlashInfer
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ FlashInfer..."
    uv pip uninstall flashinfer flashinfer-python -y 2>/dev/null || true
    
    # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if uv pip install https://github.com/flashinfer-ai/flashinfer/releases/download/v0.4.1/flashinfer_python-0.4.1-py3-none-any.whl 2>/dev/null; then
        echo -e "${GREEN}‚úÖ FlashInfer 0.4.1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    elif uv pip install flashinfer-python --extra-index-url https://flashinfer.ai/whl/${FLASHINFER_CUDA}/torch2.4/ 2>/dev/null; then
        echo -e "${GREEN}‚úÖ FlashInfer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  FlashInfer –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, vLLM –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ${NC}"
    fi
    
    echo ""
}

# ============================================================================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ============================================================================

main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Toolkit
    if ! check_toolkit; then
        install_toolkit
        setup_env
    else
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if [ -z "$CUDA_HOME" ]; then
            export CUDA_HOME=${CUDA_PATH}
            export PATH=$CUDA_HOME/bin:$PATH
            export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
        fi
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
    setup_python
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
    
    echo "üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    echo -e "   Driver CUDA: ${GREEN}${DRIVER_CUDA_FULL}${NC}"
    echo -e "   Toolkit: ${GREEN}${TOOLKIT_VERSION}${NC}"
    
    if [ -d ".venv" ]; then
        source .venv/bin/activate
        TORCH_VER=$(python -c "import torch; print(torch.__version__)" 2>/dev/null)
        TORCH_CUDA=$(python -c "import torch; print(torch.version.cuda)" 2>/dev/null)
        echo -e "   PyTorch: ${GREEN}${TORCH_VER}${NC} (CUDA ${TORCH_CUDA})"
        
        if python -c "import flashinfer" 2>/dev/null; then
            FI_VER=$(python -c "import flashinfer; print(flashinfer.__version__)" 2>/dev/null)
            echo -e "   FlashInfer: ${GREEN}${FI_VER}${NC}"
        fi
    fi
    
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   source ~/.bashrc"
    echo "   source .venv/bin/activate"
    echo "   ./start_server.sh --model qwen-7b"
    echo ""
}

main

